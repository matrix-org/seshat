warning: Patch `diesel_migrations v2.2.0 (https://github.com/diesel-rs/diesel?branch=master#8939fce6)` was not used in the crate graph.
Check that the patched package version and available features are compatible
with the dependency requirements. If the patch has a different version from
what is locked in the Cargo.lock file, run `cargo update` to use the new
version. This may also occur with an optional dependency that is not enabled.
warning: unused imports: `Arc`, `Mutex`, and `thread::sleep`
  --> seshat-core/src/database/searcher.rs:17:12
   |
17 |     sync::{Arc, Mutex},
   |            ^^^  ^^^^^
18 |     thread::sleep,
   |     ^^^^^^^^^^^^^
   |
   = note: `#[warn(unused_imports)]` on by default

warning: unused imports: `Database` and `self`
  --> seshat-core/src/database/searcher.rs:29:14
   |
29 |     events::{self, MxId, Profile, SerializedEvent},
   |              ^^^^
30 |     index::IndexSearcher,
31 |     Database,
   |     ^^^^^^^^

warning: unused imports: `cmp::Ordering`, `fmt::format`, and `hash_map`
  --> seshat-core/src/database/static_methods.rs:16:5
   |
16 |     cmp::Ordering,
   |     ^^^^^^^^^^^^^
17 |     collections::{hash_map, HashMap},
   |                   ^^^^^^^^
18 |     fmt::format,
   |     ^^^^^^^^^^^

warning: unused imports: `Queryable` and `query_dsl::methods::FilterDsl`
  --> seshat-core/src/database/static_methods.rs:31:5
   |
31 |     query_dsl::methods::FilterDsl,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
34 |     update, ExpressionMethods, Identifiable, Insertable, Queryable, RunQueryDsl, Selectable,
   |                                                          ^^^^^^^^^

warning: unused import: `aes::cipher::Key`
  --> seshat-core/src/database/mod.rs:21:5
   |
21 | use aes::cipher::Key;
   |     ^^^^^^^^^^^^^^^^

warning: unused import: `database::writer::Writer`
  --> seshat-core/src/database/mod.rs:46:5
   |
46 |     database::writer::Writer,
   |     ^^^^^^^^^^^^^^^^^^^^^^^^

warning: unused variable: `config`
   --> seshat-core/src/database/mod.rs:172:54
    |
172 |     async fn establish_connection(db_path: &PathBuf, config: &Config) -> WasmSqliteConnection {
    |                                                      ^^^^^^ help: if this is intentional, prefix it with an underscore: `_config`
    |
    = note: `#[warn(unused_variables)]` on by default

warning: unused import: `Identifiable`
  --> seshat-core/src/database/static_methods.rs:34:32
   |
34 |     update, ExpressionMethods, Identifiable, Insertable, Queryable, RunQueryDsl, Selectable,
   |                                ^^^^^^^^^^^^

warning: unused variable: `retry`
  --> seshat-core/src/database/searcher.rs:93:17
   |
93 |         let mut retry = 0;
   |                 ^^^^^ help: if this is intentional, prefix it with an underscore: `_retry`

warning: variable does not need to be mutable
  --> seshat-core/src/database/searcher.rs:93:13
   |
93 |         let mut retry = 0;
   |             ----^^^^^
   |             |
   |             help: remove this `mut`
   |
   = note: `#[warn(unused_mut)]` on by default

warning: unused variable: `parameter_str`
   --> seshat-core/src/database/static_methods.rs:156:17
    |
156 |             let parameter_str = ", ?".repeat(chunk.len() - 1);
    |                 ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_parameter_str`

warning: unused variable: `parameter_str`
   --> seshat-core/src/database/static_methods.rs:184:17
    |
184 |             let parameter_str = ", ?".repeat(chunk.len() - 1);
    |                 ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_parameter_str`

warning: unused variable: `version`
   --> seshat-core/src/database/static_methods.rs:248:9
    |
248 |         version: i64,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_version`

warning: unused variable: `result`
   --> seshat-core/src/database/static_methods.rs:303:17
    |
303 |             let result = sql_query("ALTER TABLE profiles RENAME TO profile").execute(conn);
    |                 ^^^^^^ help: if this is intentional, prefix it with an underscore: `_result`

warning: unused variable: `room_id`
   --> seshat-core/src/database/static_methods.rs:465:13
    |
465 |         let room_id = Database::get_room_id(room_id);
    |             ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_room_id`

warning: unused variable: `displayname`
   --> seshat-core/src/database/static_methods.rs:491:13
    |
491 |         let displayname = if let Some(d) = displayname { d } else { "" };
    |             ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_displayname`

warning: unused variable: `avatar_url`
   --> seshat-core/src/database/static_methods.rs:493:13
    |
493 |         let avatar_url = if let Some(a) = avatar_url { a } else { "" };
    |             ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_avatar_url`

warning: unused variable: `user_id`
   --> seshat-core/src/database/static_methods.rs:484:9
    |
484 |         user_id: &str,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_user_id`

warning: unused variable: `room`
   --> seshat-core/src/database/static_methods.rs:540:9
    |
540 |         room: &str,
    |         ^^^^ help: if this is intentional, prefix it with an underscore: `_room`

warning: unused variable: `profile_id`
   --> seshat-core/src/database/static_methods.rs:594:9
    |
594 |         profile_id: i64,
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_profile_id`

warning: unused variable: `ret`
   --> seshat-core/src/database/static_methods.rs:639:13
    |
639 |         let ret = Database::save_profile(&event.sender, profile);
    |             ^^^ help: if this is intentional, prefix it with an underscore: `_ret`

warning: unused variable: `event_id`
   --> seshat-core/src/database/static_methods.rs:679:9
    |
679 |         event_id: &str,
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_event_id`

warning: unused variable: `room_id`
   --> seshat-core/src/database/static_methods.rs:690:13
    |
690 |         let room_id = Database::get_room_id(&event.room_id);
    |             ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_room_id`

warning: unused variable: `limit`
   --> seshat-core/src/database/static_methods.rs:712:9
    |
712 |         limit: usize,
    |         ^^^^^ help: if this is intentional, prefix it with an underscore: `_limit`

warning: unused variable: `from_event`
   --> seshat-core/src/database/static_methods.rs:713:9
    |
713 |         from_event: Option<&Event>,
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_from_event`

warning: unused variable: `room_id`
   --> seshat-core/src/database/static_methods.rs:750:9
    |
750 |         room_id: &str,
    |         ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_room_id`

warning: unused variable: `limit`
   --> seshat-core/src/database/static_methods.rs:751:9
    |
751 |         limit: usize,
    |         ^^^^^ help: if this is intentional, prefix it with an underscore: `_limit`

warning: unused variable: `from_event`
   --> seshat-core/src/database/static_methods.rs:752:9
    |
752 |         from_event: Option<&str>,
    |         ^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_from_event`

warning: unused variable: `direction`
   --> seshat-core/src/database/static_methods.rs:753:9
    |
753 |         direction: &LoadDirection,
    |         ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_direction`

warning: unused variable: `event`
   --> seshat-core/src/database/static_methods.rs:827:9
    |
827 |         event: &Event,
    |         ^^^^^ help: if this is intentional, prefix it with an underscore: `_event`

warning: unused variable: `before_limit`
   --> seshat-core/src/database/static_methods.rs:828:9
    |
828 |         before_limit: usize,
    |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_before_limit`

warning: unused variable: `after_limit`
   --> seshat-core/src/database/static_methods.rs:829:9
    |
829 |         after_limit: usize,
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_after_limit`

warning: variable does not need to be mutable
   --> seshat-core/src/database/static_methods.rs:831:13
    |
831 |         let mut profiles: HashMap<String, Profile> = HashMap::new();
    |             ----^^^^^^^^
    |             |
    |             help: remove this `mut`

warning: unused variable: `room_id`
   --> seshat-core/src/database/static_methods.rs:930:13
    |
930 |         let room_id = Database::get_room_id(room_id);
    |             ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_room_id`

warning: unused variable: `event_id`
   --> seshat-core/src/database/static_methods.rs:928:9
    |
928 |         event_id: &str,
    |         ^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_event_id`

warning: unused variable: `parameter_str`
   --> seshat-core/src/database/static_methods.rs:976:13
    |
976 |         let parameter_str = ", ?".repeat(event_num - 1);
    |             ^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_parameter_str`

warning: unused variable: `scores`
    --> seshat-core/src/database/static_methods.rs:1003:18
     |
1003 |         let (mut scores, event_ids): (HashMap<String, f32>, Vec<String>) = {
     |                  ^^^^^^ help: if this is intentional, prefix it with an underscore: `_scores`

warning: unused variable: `event_ids`
    --> seshat-core/src/database/static_methods.rs:1003:26
     |
1003 |         let (mut scores, event_ids): (HashMap<String, f32>, Vec<String>) = {
     |                          ^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_event_ids`

warning: unused variable: `before_limit`
   --> seshat-core/src/database/static_methods.rs:967:9
    |
967 |         before_limit: usize,
    |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_before_limit`

warning: unused variable: `after_limit`
   --> seshat-core/src/database/static_methods.rs:968:9
    |
968 |         after_limit: usize,
    |         ^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_after_limit`

warning: variable does not need to be mutable
    --> seshat-core/src/database/static_methods.rs:1003:14
     |
1003 |         let (mut scores, event_ids): (HashMap<String, f32>, Vec<String>) = {
     |              ----^^^^^^
     |              |
     |              help: remove this `mut`

warning: variable does not need to be mutable
    --> seshat-core/src/database/static_methods.rs:1033:13
     |
1033 |         let mut events = Vec::new();
     |             ----^^^^^^
     |             |
     |             help: remove this `mut`

warning: unused variable: `new`
    --> seshat-core/src/database/static_methods.rs:1063:9
     |
1063 |         new: Option<&CrawlerCheckpoint>,
     |         ^^^ help: if this is intentional, prefix it with an underscore: `_new`

warning: unused variable: `old`
    --> seshat-core/src/database/static_methods.rs:1064:9
     |
1064 |         old: Option<&CrawlerCheckpoint>,
     |         ^^^ help: if this is intentional, prefix it with an underscore: `_old`

warning: unused variable: `version`
   --> seshat-core/src/database/mod.rs:133:14
    |
133 |         let (version, reindex_needed) = match Database::get_version(&mut connection) {
    |              ^^^^^^^ help: if this is intentional, prefix it with an underscore: `_version`

warning: unused variable: `reindex_needed`
   --> seshat-core/src/database/mod.rs:133:23
    |
133 |         let (version, reindex_needed) = match Database::get_version(&mut connection) {
    |                       ^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_reindex_needed`

warning: unused variable: `rx`
   --> seshat-core/src/database/mod.rs:317:18
    |
317 |         let (tx, rx): (_, Receiver<ThreadMessage>) = channel();
    |                  ^^ help: if this is intentional, prefix it with an underscore: `_rx`

warning: unused variable: `index_writer`
   --> seshat-core/src/database/mod.rs:315:9
    |
315 |         index_writer: IndexWriter,
    |         ^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_index_writer`

warning: unused variable: `loaded_unprocessed`
   --> seshat-core/src/database/mod.rs:321:21
    |
321 |             let mut loaded_unprocessed = false;
    |                     ^^^^^^^^^^^^^^^^^^ help: if this is intentional, prefix it with an underscore: `_loaded_unprocessed`

warning: variable does not need to be mutable
   --> seshat-core/src/database/mod.rs:321:17
    |
321 |             let mut loaded_unprocessed = false;
    |                 ----^^^^^^^^^^^^^^^^^^
    |                 |
    |                 help: remove this `mut`

warning: unused variable: `path`
   --> seshat-core/src/index/mod.rs:451:9
    |
451 |         path: P,
    |         ^^^^ help: if this is intentional, prefix it with an underscore: `_path`

warning: unused variable: `config`
   --> seshat-core/src/index/mod.rs:452:9
    |
452 |         config: &Config,
    |         ^^^^^^ help: if this is intentional, prefix it with an underscore: `_config`

warning: field `0` is never read
  --> seshat-core/src/database/mod.rs:68:11
   |
68 |     Event((Event, Profile)),
   |     ----- ^^^^^^^^^^^^^^^^
   |     |
   |     field in this variant
   |
   = note: `#[warn(dead_code)]` on by default
help: consider changing the field to be of unit type to suppress this warning while preserving the field numbering, or remove the field
   |
68 |     Event(()),
   |           ~~

warning: field `0` is never read
  --> seshat-core/src/database/mod.rs:69:20
   |
69 |     HistoricEvents(HistoricEventsT),
   |     -------------- ^^^^^^^^^^^^^^^
   |     |
   |     field in this variant
   |
help: consider changing the field to be of unit type to suppress this warning while preserving the field numbering, or remove the field
   |
69 |     HistoricEvents(()),
   |                    ~~

warning: fields `0` and `1` are never read
  --> seshat-core/src/database/mod.rs:70:11
   |
70 |     Write(Sender<Result<()>>, bool),
   |     ----- ^^^^^^^^^^^^^^^^^^  ^^^^
   |     |
   |     fields in this variant
   |
help: consider changing the fields to be of unit type to suppress this warning while preserving the field numbering, or remove the fields
   |
70 |     Write((), ()),
   |           ~~  ~~

warning: fields `0` and `1` are never read
  --> seshat-core/src/database/mod.rs:71:12
   |
71 |     Delete(Sender<Result<bool>>, EventId),
   |     ------ ^^^^^^^^^^^^^^^^^^^^  ^^^^^^^
   |     |
   |     fields in this variant
   |
help: consider changing the fields to be of unit type to suppress this warning while preserving the field numbering, or remove the fields
   |
71 |     Delete((), ()),
   |            ~~  ~~

warning: field `0` is never read
  --> seshat-core/src/database/mod.rs:72:14
   |
72 |     ShutDown(Sender<Result<()>>),
   |     -------- ^^^^^^^^^^^^^^^^^^
   |     |
   |     field in this variant
   |
help: consider changing the field to be of unit type to suppress this warning while preserving the field numbering, or remove the field
   |
72 |     ShutDown(()),
   |              ~~

warning: fields `conn` and `config` are never read
  --> seshat-core/src/database/mod.rs:78:5
   |
76 | pub struct Database {
   |            -------- fields in this struct
77 |     path: PathBuf,
78 |     conn: Arc<Mutex<WasmSqliteConnection>>,
   |     ^^^^
...
83 |     config: Config,
   |     ^^^^^^

warning: field `version` is never read
  --> seshat-core/src/database/mod.rs:91:5
   |
89 | struct CipherVersion {
   |        ------------- field in this struct
90 |     #[diesel(sql_type = diesel::sql_types::Text)]
91 |     version: String,
   |     ^^^^^^^
   |
   = note: `CipherVersion` has a derived impl for the trait `Debug`, but this is intentionally ignored during dead code analysis

warning: static `BUSY_RETRY` is never used
  --> seshat-core/src/database/searcher.rs:34:8
   |
34 | static BUSY_RETRY: usize = 10;
   |        ^^^^^^^^^^

warning: static `BUSY_SLEEP` is never used
  --> seshat-core/src/database/searcher.rs:35:8
   |
35 | static BUSY_SLEEP: Duration = Duration::from_millis(10);
   |        ^^^^^^^^^^

warning: constant `FILE_EVENT_TYPES` is never used
  --> seshat-core/src/database/static_methods.rs:51:7
   |
51 | const FILE_EVENT_TYPES: &str = "'m.image', 'm.file', 'm.audio', 'm.video'";
   |       ^^^^^^^^^^^^^^^^

warning: multiple associated functions are never used
    --> seshat-core/src/database/static_methods.rs:93:19
     |
88   | impl Database {
     | ------------- associated functions in this implementation
...
93   |     pub(crate) fn write_events_helper(
     |                   ^^^^^^^^^^^^^^^^^^^
...
119  |     pub(crate) fn delete_event_helper(
     |                   ^^^^^^^^^^^^^^^^^^^
...
146  |     pub(crate) fn mark_events_as_deleted(
     |                   ^^^^^^^^^^^^^^^^^^^^^^
...
174  |     pub(crate) fn mark_events_as_indexed(
     |                   ^^^^^^^^^^^^^^^^^^^^^^
...
201  |     pub(crate) fn write_events(
     |                   ^^^^^^^^^^^^
...
240  |     pub(crate) fn get_user_version(// conn: &WasmSqliteConnection
     |                   ^^^^^^^^^^^^^^^^
...
246  |     pub(crate) fn set_user_version(
     |                   ^^^^^^^^^^^^^^^^
...
348  |     pub(crate) fn create_tables(// conn: &WasmSqliteConnection
     |                   ^^^^^^^^^^^^^
...
456  |     pub(crate) fn get_event_count() -> i64 {
     |                   ^^^^^^^^^^^^^^^
...
461  |     pub(crate) fn get_event_count_for_room(
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^
...
474  |     pub(crate) fn get_room_count(// conn: &WasmSqliteConnection
     |                   ^^^^^^^^^^^^^^
...
482  |     pub(crate) fn save_profile(
     |                   ^^^^^^^^^^^^
...
538  |     pub(crate) fn get_room_id(
     |                   ^^^^^^^^^^^
...
552  |     pub(crate) fn load_pending_deletion_events(// conn: &WasmSqliteConnection,
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
...
561  |     pub(crate) fn load_uncommitted_events(// conn: &WasmSqliteConnection,
     |                   ^^^^^^^^^^^^^^^^^^^^^^^
...
591  |     pub(crate) fn save_event_helper(
     |                   ^^^^^^^^^^^^^^^^^
...
630  |     pub(crate) fn save_event(
     |                   ^^^^^^^^^^
...
677  |     pub(crate) fn delete_event_by_id(
     |                   ^^^^^^^^^^^^^^^^^^
...
686  |     pub(crate) fn event_in_store(
     |                   ^^^^^^^^^^^^^^
...
710  |     pub(crate) fn load_all_events(
     |                   ^^^^^^^^^^^^^^^
...
748  |     pub(crate) fn load_file_events(
     |                   ^^^^^^^^^^^^^^^^
...
825  |     pub(crate) fn load_event_context(
     |                   ^^^^^^^^^^^^^^^^^^
...
925  |     pub(crate) fn load_event(
     |                   ^^^^^^^^^^
...
964  |     pub(crate) fn load_events(
     |                   ^^^^^^^^^^^
...
1061 |     pub(crate) fn replace_crawler_checkpoint(
     |                   ^^^^^^^^^^^^^^^^^^^^^^^^^^

warning: struct `Writer` is never constructed
  --> seshat-core/src/database/writer.rs:24:19
   |
24 | pub(crate) struct Writer {
   |                   ^^^^^^

warning: multiple associated items are never used
   --> seshat-core/src/database/writer.rs:33:12
    |
32  | impl Writer {
    | ----------- associated items in this implementation
33  |     pub fn new(
    |            ^^^
...
46  |     pub fn add_event(&mut self, event: Event, profile: Profile) {
    |            ^^^^^^^^^
...
50  |     pub fn delete_event(&mut self, event_id: EventId) -> Result<bool> {
    |            ^^^^^^^^^^^^
...
59  |     fn mark_events_as_deleted(&mut self) -> Result<()> {
    |        ^^^^^^^^^^^^^^^^^^^^^^
...
66  |     pub fn write_queued_events(&mut self, force_commit: bool) -> Result<()> {
    |            ^^^^^^^^^^^^^^^^^^^
...
82  |     pub fn write_historic_events(
    |            ^^^^^^^^^^^^^^^^^^^^^
...
109 |     pub fn load_unprocessed_events(&mut self) -> Result<()> {
    |            ^^^^^^^^^^^^^^^^^^^^^^^
...
128 |     pub fn shutdown(self) -> Result<()> {
    |            ^^^^^^^^

warning: type alias `EventContext` is never used
   --> seshat-core/src/events.rs:141:17
    |
141 | pub(crate) type EventContext = (
    |                 ^^^^^^^^^^^^

warning: constant `COMMIT_RATE` is never used
  --> seshat-core/src/index/mod.rs:70:7
   |
70 | const COMMIT_RATE: usize = 500;
   |       ^^^^^^^^^^^

warning: constant `COMMIT_TIME` is never used
  --> seshat-core/src/index/mod.rs:73:7
   |
73 | const COMMIT_TIME: Duration = Duration::from_secs(5);
   |       ^^^^^^^^^^^

warning: multiple fields are never read
   --> seshat-core/src/index/mod.rs:115:5
    |
114 | pub(crate) struct Writer {
    |                   ------ fields in this struct
115 |     inner: tv::IndexWriter,
    |     ^^^^^
116 |     body_field: tv::schema::Field,
    |     ^^^^^^^^^^
117 |     topic_field: tv::schema::Field,
    |     ^^^^^^^^^^^
118 |     name_field: tv::schema::Field,
    |     ^^^^^^^^^^
119 |     event_id_field: tv::schema::Field,
    |     ^^^^^^^^^^^^^^
120 |     sender_field: tv::schema::Field,
    |     ^^^^^^^^^^^^
121 |     date_field: tv::schema::Field,
    |     ^^^^^^^^^^
122 |     added_events: usize,
    |     ^^^^^^^^^^^^
123 |     commit_timestamp: std::time::Instant,
    |     ^^^^^^^^^^^^^^^^
124 |     room_id_field: tv::schema::Field,
    |     ^^^^^^^^^^^^^

warning: methods `commit`, `commit_helper`, `force_commit`, `add_event`, `delete_event`, and `wait_merging_threads` are never used
   --> seshat-core/src/index/mod.rs:128:12
    |
127 | impl Writer {
    | ----------- methods in this implementation
128 |     pub fn commit(&mut self) -> Result<bool, tv::TantivyError> {
    |            ^^^^^^
...
132 |     fn commit_helper(&mut self, force: bool) -> Result<bool, tv::TantivyError> {
    |        ^^^^^^^^^^^^^
...
147 |     pub fn force_commit(&mut self) -> Result<(), tv::TantivyError> {
    |            ^^^^^^^^^^^^
...
152 |     pub fn add_event(&mut self, event: &Event) {
    |            ^^^^^^^^^
...
171 |     pub fn delete_event(&mut self, event_id: &str) {
    |            ^^^^^^^^^^^^
...
177 |     pub fn wait_merging_threads(self) -> Result<(), tv::TantivyError> {
    |            ^^^^^^^^^^^^^^^^^^^^

warning: field `date_field` is never read
   --> seshat-core/src/index/mod.rs:193:5
    |
182 | pub(crate) struct IndexSearcher {
    |                   ------------- field in this struct
...
193 |     date_field: tv::schema::Field,
    |     ^^^^^^^^^^

warning: constant `BUFFER_SIZE` is never used
  --> seshat-core/src/index/encrypted_stream.rs:35:7
   |
35 | const BUFFER_SIZE: usize = 8192;
   |       ^^^^^^^^^^^

warning: associated function `new` is never used
  --> seshat-core/src/index/encrypted_stream.rs:66:12
   |
52 | impl<E: StreamCipher + KeyIvInit, M: Mac + NewMac, W: Write> AesWriter<E, M, W> {
   | ------------------------------------------------------------------------------- associated function in this implementation
...
66 |     pub fn new(
   |            ^^^

warning: associated function `new` is never used
   --> seshat-core/src/index/encrypted_stream.rs:195:12
    |
183 | impl<D: StreamCipher + KeyIvInit, R: Read + Seek + Clone> AesReader<D, R> {
    | ------------------------------------------------------------------------- associated function in this implementation
...
195 |     pub fn new<M: Mac + NewMac>(
    |            ^^^

warning: unused `std::result::Result` that must be used
   --> seshat-core/src/database/mod.rs:236:9
    |
236 |         sql_query(query).execute(conn);
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this `Result` may be an `Err` variant, which should be handled
    = note: `#[warn(unused_must_use)]` on by default
help: use `let _ = ...` to ignore the resulting value
    |
236 |         let _ = sql_query(query).execute(conn);
    |         +++++++

warning: unused `std::result::Result` that must be used
   --> seshat-core/src/database/static_methods.rs:255:9
    |
255 | /         sql_query(
256 | |             "CREATE TABLE IF NOT EXISTS version (
257 | |                 id INTEGER NOT NULL PRIMARY KEY CHECK (id = 1),
258 | |                 version INTEGER NOT NULL
259 | |             )",
260 | |         )
261 | |         .execute(conn);
    | |______________________^
    |
    = note: this `Result` may be an `Err` variant, which should be handled
help: use `let _ = ...` to ignore the resulting value
    |
255 |         let _ = sql_query(
    |         +++++++

warning: unused `std::result::Result` that must be used
   --> seshat-core/src/database/static_methods.rs:263:9
    |
263 | /         sql_query(
264 | |             "CREATE TABLE IF NOT EXISTS reindex_needed (
265 | |                 id INTEGER NOT NULL PRIMARY KEY CHECK (id = 1),
266 | |                 reindex_needed BOOL NOT NULL
267 | |             )",
268 | |         )
269 | |         .execute(conn);
    | |______________________^
    |
    = note: this `Result` may be an `Err` variant, which should be handled
help: use `let _ = ...` to ignore the resulting value
    |
263 |         let _ = sql_query(
    |         +++++++

warning: unused `std::result::Result` that must be used
   --> seshat-core/src/database/static_methods.rs:271:9
    |
271 | /         insert_or_ignore_into(reindex_needed_table::table)
272 | |             .values(reindex_needed_table::reindex_needed.eq(false))
273 | |             .execute(conn);
    | |__________________________^
    |
    = note: this `Result` may be an `Err` variant, which should be handled
help: use `let _ = ...` to ignore the resulting value
    |
271 |         let _ = insert_or_ignore_into(reindex_needed_table::table)
    |         +++++++

warning: unused `std::result::Result` that must be used
   --> seshat-core/src/database/static_methods.rs:275:9
    |
275 | /         insert_or_ignore_into(version_table::table)
276 | |             .values(version_table::version.eq(DATABASE_VERSION))
277 | |             .execute(conn);
    | |__________________________^
    |
    = note: this `Result` may be an `Err` variant, which should be handled
help: use `let _ = ...` to ignore the resulting value
    |
275 |         let _ = insert_or_ignore_into(version_table::table)
    |         +++++++

warning: unused `std::result::Result` that must be used
   --> seshat-core/src/database/static_methods.rs:279:9
    |
279 | /         sql_query(format!(
280 | |             "INSERT OR IGNORE INTO version ( version ) VALUES({})",
281 | |             DATABASE_VERSION
282 | |         ))
283 | |         .execute(conn);
    | |______________________^
    |
    = note: this `Result` may be an `Err` variant, which should be handled
help: use `let _ = ...` to ignore the resulting value
    |
279 |         let _ = sql_query(format!(
    |         +++++++

warning: unused `std::result::Result` that must be used
   --> seshat-core/src/database/static_methods.rs:311:13
    |
311 |             sql_query("UPDATE version SET version = '2'").execute(conn);
    |             ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this `Result` may be an `Err` variant, which should be handled
help: use `let _ = ...` to ignore the resulting value
    |
311 |             let _ = sql_query("UPDATE version SET version = '2'").execute(conn);
    |             +++++++

warning: unused `std::result::Result` that must be used
   --> seshat-core/src/index/mod.rs:166:9
    |
166 |         self.inner.add_document(doc);
    |         ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    |
    = note: this `Result` may be an `Err` variant, which should be handled
help: use `let _ = ...` to ignore the resulting value
    |
166 |         let _ = self.inner.add_document(doc);
    |         +++++++

warning: `seshat` (lib) generated 82 warnings (run `cargo fix --lib -p seshat` to apply 11 suggestions)
    Finished `dev` profile [unoptimized] target(s) in 0.29s
